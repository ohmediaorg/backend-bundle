<script src="/backend/js/tinymce/tinymce.min.js"></script>

<script async>
function OH_MEDIA_TINYMCE(container, selector) {
  const els = container.querySelectorAll(selector);

  els.forEach(el => {
    el.required = false;

    tinymce.init({
      target: el,
      plugins: {{ plugins|json_encode|raw }},
      toolbar: {{ toolbar|json_encode|raw }},
      license_key: 'gpl',
    });
  });
}

tinymce.PluginManager.add('shortcodes', (editor, url) => {
  const twigOpen = {{ '{{ '|json_encode|raw }};
  const twigClose = {{ ' }}'|json_encode|raw }};

  function openDialog() {
    let shortcode = null;

    const dialog = editor.windowManager.open({
      title: 'Shortcodes',
      body: {
        type: 'tabpanel',
        tabs: {{ shortcodes|json_encode|raw }}
      },
      buttons: [
        { type: 'cancel', text: 'Close' },
        { type: 'submit', text: 'Insert', buttonType: 'primary' }
      ],
      onTabChange: (api, details) => {
        const data = api.getData();

        shortcode = data[`${details.newTabName}_shortcode`];
      },
      onChange: (api, details) => {
        const data = api.getData();

        shortcode = data[details.name];
      },
      onSubmit: (api) => {
        if (shortcode) {
          editor.insertContent(twigOpen + shortcode + twigClose);
        }

        api.close();
      }
    });

    shortcode = dialog.getData().tab_0_shortcode;
  }

  editor.ui.registry.addButton('shortcodes', {
    name: 'Shortcodes',
    icon: 'code-sample',
    onAction: openDialog,
  });

  editor.ui.registry.addMenuItem('shortcodes', {
    text: 'Shortcodes',
    icon: 'code-sample',
    onAction: openDialog,
  });

  return {
    getMetadata: () => ({
      name: 'Shortcodes',
      url: 'mailto:support@ohmedia.ca',
    })
  };
});

document.addEventListener('DOMContentLoaded', function() {
  OH_MEDIA_TINYMCE(document, 'textarea.wysiwyg');

  const observer = new MutationObserver(function(mutationList, observer) {
    for (const mutation of mutationList) {
      if ('childList' !== mutation.type) {
        continue;
      }

      OH_MEDIA_TINYMCE(mutation.target, 'textarea.wysiwyg');
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });
});
</script>
